// Copyright (C) 2025 Manuel Perez 
// mail: <manuel2perez@proton.me> 
// https://github.com/amanuellperez/mcu 
// 
// This file is part of the MCU++ Library. 
// 
// MCU++ Library is a free library: you can redistribute it and/or modify 
// it under the terms of the GNU General Public License as published by 
// the Free Software Foundation, either version 3 of the License, or 
// (at your option) any later version. 
// 
// This library is distributed in the hope that it will be useful, 
// but WITHOUT ANY WARRANTY; without even the implied warranty of 
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
// GNU General Public License for more details. 
// 
// You should have received a copy of the GNU General Public License 
// along with this program. If not, see <https://www.gnu.org/licenses/>. 

// This file was automatically generated by str2rom 
 
#pragma once 
 
#ifndef __STRINGS_H__ 
#define __STRINGS_H__ 


constexpr myu::ROM_string<3> msg_yes	
	PROGMEM{"yes"};

constexpr myu::ROM_string<2> msg_no	
	PROGMEM{"no"};

constexpr myu::ROM_string<2> msg_ok	
	PROGMEM{"ok"};

constexpr myu::ROM_string<24> msg_press_key_to_continue   
	PROGMEM{"Press a key to continue\n"};

constexpr myu::ROM_string<32> msg_line    
	PROGMEM{"-------------------------------\n"};

constexpr myu::ROM_string<11> msg_cmd0_fail		
	PROGMEM{"CMD0 error\n"};

constexpr myu::ROM_string<15> msg_cmd8_crc_error	
	PROGMEM{"CMD8 CRC error\n"};

constexpr myu::ROM_string<24> msg_voltage_mismatch	
	PROGMEM{"ERROR: voltage mismatch\n"};

constexpr myu::ROM_string<15> msg_cmd8_echo_fail	
	PROGMEM{"CMD8 echo fail\n"};

constexpr myu::ROM_string<38> msg_acmd41_in_idle_state 
	PROGMEM{"ACMD41 fail: card still in idle state\n"};

constexpr myu::ROM_string<35> msg_card_no_power_up	
	PROGMEM{"CMD58 fail: card still no power up\n"};

constexpr myu::ROM_string<24> msg_init_SDSC_card_ok	
	PROGMEM{"Init OK: SDSC card type\n"};

constexpr myu::ROM_string<32> msg_init_SDHC_or_SDXC_ok 
	PROGMEM{"Init OK: SDHC or SDXC card type\n"};

constexpr myu::ROM_string<45> msg_go_idle_state   
	PROGMEM{"go_idle_state (cmd0) ... = entering SPI mode\n"};

constexpr myu::ROM_string<26> msg_send_if_cond    
	PROGMEM{"\nsend_if_cond (cmd8) ... \n"};

constexpr myu::ROM_string<14> msg_legacy_card	    
	PROGMEM{"\tLegacy card\n"};

constexpr myu::ROM_string<15> msg_vca_mismatch    
	PROGMEM{"\tVCA mismatch\n"};

constexpr myu::ROM_string<10> msg_cmd8_ok	    
	PROGMEM{"\tCMD8 ok\n"};

constexpr myu::ROM_string<44> msg_read_ocr1	    
	PROGMEM{"\nread_ocr (cmd58) ... = supported voltages?\n"};

constexpr myu::ROM_string<31> msg_send_op_cond    
	PROGMEM{"\nsd_send_op_cond (acmd41) ... \n"};

constexpr myu::ROM_string<52> msg_read_ocr2	    
	PROGMEM{"\nread_ocr (cmd58) ... = is SDSC or SDHC/SDXC card? \n"};

constexpr myu::ROM_string<90> msg_hello   
	PROGMEM{"----------------------------------------\nSDCard\n----------------------------------------\n\n"};

constexpr myu::ROM_string<74> msg_main_menu	
	PROGMEM{"Menu\n----\nChoose type of initialization:\n\t1. Step by step\n\t2. Automatic\n"};

constexpr myu::ROM_string<69> msg_main_menu2	
	PROGMEM{"\n----\n1. Read status register\n2. Read block\n3. Write block\nr. Return\n"};

constexpr myu::ROM_string<23> msg_main_read	
	PROGMEM{"Read\n----\nblock_size = "};

constexpr myu::ROM_string<7> msg_address	
	PROGMEM{"Address"};

constexpr myu::ROM_string<8> msg_read_ok 
	PROGMEM{"read OK."};

constexpr myu::ROM_string<12> msg_main_write  
	PROGMEM{"Write\n-----\n"};

constexpr myu::ROM_string<19> msg_r1_response	
	PROGMEM{"R1 response\n\tR1 : "};

constexpr myu::ROM_string<20> msg_invalid_r1		
	PROGMEM{"\tError: invalid r1\n"};

constexpr myu::ROM_string<13> msg_card_ready		
	PROGMEM{"\tCard ready\n"};

constexpr myu::ROM_string<16> msg_in_idle_state	
	PROGMEM{"\tIn idle state\n"};

constexpr myu::ROM_string<20> msg_erase_reset_error	
	PROGMEM{"\tErase reset error\n"};

constexpr myu::ROM_string<18> msg_illegal_command	
	PROGMEM{"\tIllegal command\n"};

constexpr myu::ROM_string<12> msg_crc_error		
	PROGMEM{"\tCRC error\n"};

constexpr myu::ROM_string<23> msg_erase_sequence_error 
	PROGMEM{"\tErase sequence error\n"};

constexpr myu::ROM_string<16> msg_address_error	
	PROGMEM{"\tAddress error\n"};

constexpr myu::ROM_string<18> msg_parameter_error	
	PROGMEM{"\tParameter error\n"};

constexpr myu::ROM_string<5> msg_r1	    
	PROGMEM{"\tr1["};

constexpr myu::ROM_string<9> msg_error1  
	PROGMEM{"] ERROR:\n"};

constexpr myu::ROM_string<11> msg_r3 
	PROGMEM{"\tR3     : "};

constexpr myu::ROM_string<12> msg_r3_response 
	PROGMEM{"R3 response\n"};

constexpr myu::ROM_string<30> msg_card_has_finished_power_up 
	PROGMEM{"\tCard has finished power up? "};

constexpr myu::ROM_string<14> msg_card_type	    
	PROGMEM{"\tCard type : "};

constexpr myu::ROM_string<4> msg_SDSC	    
	PROGMEM{"SDSC"};

constexpr myu::ROM_string<12> msg_SDHC_or_SDXC    
	PROGMEM{"SDHC or SDXC"};

constexpr myu::ROM_string<18> msg_support_3_5_3_6V 
	PROGMEM{"support 3.5-3-6V()"};

constexpr myu::ROM_string<18> msg_support_3_4_3_5V 
	PROGMEM{"support 3.4-3-5V()"};

constexpr myu::ROM_string<18> msg_support_3_3_3_4V 
	PROGMEM{"support 3.3-3-4V()"};

constexpr myu::ROM_string<18> msg_support_3_2_3_3V 
	PROGMEM{"support 3.2-3-3V()"};

constexpr myu::ROM_string<18> msg_support_3_1_3_2V 
	PROGMEM{"support 3.1-3-2V()"};

constexpr myu::ROM_string<18> msg_support_3_0_3_1V 
	PROGMEM{"support 3.0-3-1V()"};

constexpr myu::ROM_string<18> msg_support_2_9_3_0V 
	PROGMEM{"support 2.9-3-0V()"};

constexpr myu::ROM_string<18> msg_support_2_8_2_9V 
	PROGMEM{"support 2.8-2-9V()"};

constexpr myu::ROM_string<18> msg_support_2_7_2_8V 
	PROGMEM{"support 2.7-2-8V()"};

constexpr myu::ROM_string<12> msg_r7_response 
	PROGMEM{"R7 response\n"};

constexpr myu::ROM_string<11> msg_r7		
	PROGMEM{"\tR7     : "};

constexpr myu::ROM_string<11> msg_version	
	PROGMEM{"\tVersion: "};

constexpr myu::ROM_string<11> msg_voltage	
	PROGMEM{"\tVoltage: "};

constexpr myu::ROM_string<12> msg_not_defined	    
	PROGMEM{"not defined!"};

constexpr myu::ROM_string<16> msg_from_2_7_to_3_6V 
	PROGMEM{"from 2.7 to 3.6V"};

constexpr myu::ROM_string<11> msg_low_voltage	    
	PROGMEM{"low voltage"};

constexpr myu::ROM_string<8> msg_reserved	    
	PROGMEM{"reserved"};

constexpr myu::ROM_string<11> msg_pattern	    
	PROGMEM{"\tPattern: "};

constexpr myu::ROM_string<14> msg_read_return_response 
	PROGMEM{"Read response\n"};

constexpr myu::ROM_string<8> msg_timeout	
	PROGMEM{"time out"};

constexpr myu::ROM_string<5> msg_r1_ok	
	PROGMEM{"R1 ok"};

constexpr myu::ROM_string<5> msg_error	
	PROGMEM{"error"};

constexpr myu::ROM_string<8> msg_CC_error    
	PROGMEM{"CC error"};

constexpr myu::ROM_string<15> msg_card_ECC_failed   
	PROGMEM{"card ECC failed"};

constexpr myu::ROM_string<12> msg_out_of_range    
	PROGMEM{"out of range"};

constexpr myu::ROM_string<19> msg_r2_response	    
	PROGMEM{"R2 response\n\tR2 : "};

constexpr myu::ROM_string<14> msg_card_is_locked  
	PROGMEM{"card is locked"};

constexpr myu::ROM_string<23> msg_write_protect_erase_skip	
	PROGMEM{"write protec erase skip"};

constexpr myu::ROM_string<23> msg_write_protect_violation 
	PROGMEM{"write protect violation"};

constexpr myu::ROM_string<11> msg_erase_param		    
	PROGMEM{"erase param"};

constexpr myu::ROM_string<22> msg_write_return_response   
	PROGMEM{"Write_return response\n"};

constexpr myu::ROM_string<10> msg_write_ok	
	PROGMEM{"\tWrite OK"};

constexpr myu::ROM_string<22> msg_data_response_token	
	PROGMEM{"Data response token = "};

constexpr myu::ROM_string<5> msg_is_valid		
	PROGMEM{"valid"};

constexpr myu::ROM_string<13> msg_data_accepted	
	PROGMEM{"data accepted"};

constexpr myu::ROM_string<24> msg_data_rejected_CRC_error	
	PROGMEM{"data rejected, CRC error"};

constexpr myu::ROM_string<26> msg_data_rejected_write_error	
	PROGMEM{"data rejected, write error"};


 
#endif

