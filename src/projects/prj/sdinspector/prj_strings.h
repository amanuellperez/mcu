// Copyright (C) 2023 Manuel Perez 
// mail: <manuel2perez@proton.me> 
// https://github.com/amanuellperez/mcu 
// 
// This file is part of the MCU++ Library. 
// 
// MCU++ Library is a free library: you can redistribute it and/or modify 
// it under the terms of the GNU General Public License as published by 
// the Free Software Foundation, either version 3 of the License, or 
// (at your option) any later version. 
// 
// This library is distributed in the hope that it will be useful, 
// but WITHOUT ANY WARRANTY; without even the implied warranty of 
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
// GNU General Public License for more details. 
// 
// You should have received a copy of the GNU General Public License 
// along with this program. If not, see <https://www.gnu.org/licenses/>. 

// This file was automatically generated by str2rom 
 
#pragma once 
 
#ifndef __PRJ_STRINGS_H__ 
#define __PRJ_STRINGS_H__ 


constexpr my_mcu::ROM_string<102> msg_hello   
	PROGMEM{"\n\n----------------------------------------\nSDCard inspector\n----------------------------------------\n\n"};

constexpr my_mcu::ROM_string<19> msg_main_no_sector_load 
	PROGMEM{"No sector in memory"};

constexpr my_mcu::ROM_string<27> msg_main_sector_load 
	PROGMEM{"Sector in memory. Address: "};

constexpr my_mcu::ROM_string<39> msg_main_menu	
	PROGMEM{"1. Read status register\n2. Load sector\n"};

constexpr my_mcu::ROM_string<122> msg_main_menu2	
	PROGMEM{"3. Print sector\n4. Print sector bytes from a to b\n5. Edit sector in hexadecimal\n6. Edit sector with chars\n7. Flush sector\n"};

constexpr my_mcu::ROM_string<16> msg_sector_address	
	PROGMEM{"Sector address: "};

constexpr my_mcu::ROM_string<29> msg_print_sector_from 
	PROGMEM{"Print sector from byte number"};

constexpr my_mcu::ROM_string<39> msg_print_sector_size 
	PROGMEM{"Number of bytes to print (0 to the end)"};

constexpr my_mcu::ROM_string<39> msg_print_sector_from_to_big 
	PROGMEM{"\nError: first byte has to be less than "};

constexpr my_mcu::ROM_string<19> msg_print_sector_size_to_big 
	PROGMEM{"\nError: size to big"};

constexpr my_mcu::ROM_string<72> msg_edit_sector_instructions_in_hex 
	PROGMEM{"Write all modifications in hexadecimal without 0x.\nPress return to end.\n"};

constexpr my_mcu::ROM_string<55> msg_edit_sector_instructions_in_char 
	PROGMEM{"Write all modifications in chars.\nPress return to end.\n"};

constexpr my_mcu::ROM_string<18> msg_edit_sector_from 
	PROGMEM{"First byte to edit"};

constexpr my_mcu::ROM_string<13> msg_edit_sector_from_error 
	PROGMEM{"Error reading"};


 
#endif

